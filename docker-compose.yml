version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: log-analyzer-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: log_analyzer
      MYSQL_USER: loguser
      MYSQL_PASSWORD: logpass
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - log-analyzer-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # PostgreSQL Database (alternative)
  postgres:
    image: postgres:15
    container_name: log-analyzer-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: log_analyzer
      POSTGRES_USER: loguser
      POSTGRES_PASSWORD: logpass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - log-analyzer-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U loguser -d log_analyzer"]
      timeout: 20s
      retries: 10
    profiles:
      - postgres

  # Log Analyzer Application
  log-analyzer:
    build: .
    container_name: log-analyzer-app
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - ./config.yaml:/app/config.yaml
      - ./logs:/app/logs
      - ./reports:/app/reports
      - ./testdata:/app/testdata
    environment:
      - TZ=UTC
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - log-analyzer-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: log-analyzer-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - log-analyzer-network
    profiles:
      - cache

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: log-analyzer-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - log-analyzer
    networks:
      - log-analyzer-network
    profiles:
      - proxy

volumes:
  mysql_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  log-analyzer-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
